
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.Timer;


public class Board extends JPanel implements  ActionListener {
  
    private final int B_WIDTH = 400;
    private final int B_HEIGHT = 300;
    private final int INITIAL_X = 40;
    private final int INITIAL_Y = 40;
    private final int DELAY = 15;
    
    private final int ICRAFT_X = 40;
    private final int ICRAFT_Y = 60;
    

    private Timer timer;
    private Man man;
    private ArrayList<Alien> alien;
    private Map map;
    
    private boolean ingame;
            
    private final int[][] pos = {
        {2380, 29}, {2500, 59}, {1380, 89},
        {780, 109}, {580, 139}, {680, 239},
        {790, 259}, {760, 50}, {790, 150},
        {980, 209}, {560, 45}, {510, 70},
        {930, 159}, {590, 80}, {530, 60},
        {940, 59}, {990, 30}, {920, 200},
        {900, 259}, {660, 50}, {540, 90},
        {810, 220}, {860, 20}, {740, 180},
        {820, 128}, {490, 170}, {700, 30}
    };
    
    public Board(){
        initBoard();
    }
    
    private void initBoard(){
        addKeyListener(new TAdapter());
        setFocusable(true);
        ingame = true;
        setPreferredSize(new Dimension(B_WIDTH , B_HEIGHT));
        map = new Map(900, 900);
        
        man = new Man(INITIAL_X, INITIAL_Y);

        initAliens();

        timer = new Timer(DELAY, this);
        timer.start();
      
    }
    
    public void initAliens(){
        alien = new ArrayList<>(); 
        
        for (int[] p : pos){
            alien.add(new Alien(p[0], p[1]));
        }
    }
    
    @Override
    public void paintComponent(Graphics g){
        super.paintComponent(g);
        
        if (ingame){
            drawObjects(g);
        }else{
            drawGameOver(g);
        }
        
        Toolkit.getDefaultToolkit().sync();
    }
    
    private void drawObjects(Graphics g){
        if (ingame){
            g.drawImage(map.getImage(), 0, 0, this);
            
            for (int i = 0; i < map.mapArray.length; i ++){
                for (int j = 0; j < map.mapArray.length; j++){
                    g.drawImage(map.getImage(), 0, 0, this);
                }
            }
        }
        
        if (man.isVisible()){
            g.drawImage(man.getImage(), man.getX(), man.getY(), this);
        }
        
        ArrayList<Missle> ms = man.getMissle();
        
        for (Missle m :ms){
            if (m.isVisible()){
                g.drawImage(m.getImage(), m.getX(), m.getY(), this);
            }
        }
        for (Alien w : alien){
            if (w.isVisible()){
                g.drawImage(w.getImage(), w.getX(), w.getY(), this);
            }
        }
        
        g.setColor(Color.WHITE);
        g.drawString("Alien left: " + alien.size(), 5, 15);
        
    }
    
    private void drawGameOver(Graphics g){
        String msg = "Game Over";
        Font small = new Font("Helvetica", Font.BOLD, 14);
        FontMetrics fm = getFontMetrics(small);
        
        g.setColor(Color.WHITE);
        g.setFont(small);
        g.drawString(msg, (B_WIDTH - fm.stringWidth(msg)) / 2, B_HEIGHT / 2);
                
    }

    @Override
    public void actionPerformed(ActionEvent e){
        inGame();
        updateMissle();
        updateMan();
        updateAlien();        
        checkCollision();
        repaint();
    }
    
    private void inGame(){
        if (!ingame){
            timer.stop();
        }
    }
    
    
    private void updateMissle(){
        ArrayList ms = man.getMissle();
        for (int i = 0; i < ms.size(); i++){
            Missle g = (Missle) ms.get(i);
            if (g.isVisible()){
                g.move();
            }
            else{
                ms.remove(i);
            }
                   
        }
    }
    
    
    private void updateMan(){
        if (man.isVisible()){
            man.move();
        }
    }
    
    private void updateAlien(){
        if (alien.isEmpty()){
            ingame = false;
            return;
        }
        for (int i = 0; i < alien.size(); i++){
            Alien w = alien.get(i);
            if (w.isVisible()){
                w.move();
            }
            else{
                alien.remove(i);
            }
        }
        
    }
    
    public void checkCollision(){
        Rectangle r3 = man.getBounds();
        
        for (Alien w : alien){
            Rectangle r2 = w.getBounds();
            
            if (r3.intersects(r2)){
                man.setVisible(false);
                w.setVisible(false);
                ingame = false;
            }
        }
        
        ArrayList<Missle> ms = man.getMissle();
        
        for (Missle m : ms){
            Rectangle r1 = m.getBounds();
            
            for (Alien w : alien){
                Rectangle r2 = w.getBounds();
                
                if (r1.intersects(r2)){
                    m.setVisible(false);
                    w.setVisible(false);
                }
            }
        }
    }
    
    private class TAdapter extends KeyAdapter{
        public void keyReleased(KeyEvent e){
            man.keyReleased(e);
        }
        public void keyPressed(KeyEvent e){
            man.keyPressed(e);
        }
    }
    

}
